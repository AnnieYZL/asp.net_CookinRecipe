@using CookinRecipe.BusinessLayers
<div class="mt-20 md:max-w-6xl lg:flex w-full mx-auto bg-white p-6 rounded-lg shadow-lg">
    <!-- Danh sách bộ sưu tập -->
    <div class="lg:w-1/3 w-full">
        <div class="w-full h-96 overflow-y-auto scrollbar-hidden hover:scrollbar-show border p-2 rounded-lg bg-gray-50">
            <div class="text-xl text-blue-600 font-bold mb-4 border-b pb-2">Bộ sưu tập của tôi</div>

            <div id="collectionList" class="">
                @foreach (var item in ListDataService.GetListOf(long.Parse(User.GetUserData().UserId)))
                {
                    <div class="flex items-center mx-auto p-2 mb-1 rounded-lg hover:bg-gray-100 cursor-pointer" onclick="loadListPosts(@item.ListID)" data-name="@item.ListName">
                        <img src="~/Themes/assets/images/vLOGO.png" class="w-12 h-12 rounded-lg" alt="list-picture">
                        <div class="ml-3">
                            <p class="font-semibold font-sans">@item.ListName</p>
                            <p class="text-sm text-gray-500 font-sans">@ListDataService.GetListQuantity(item.ListID) công thức</p>
                        </div>
                    </div>
                }
            </div>


        </div>
        <div class="mt-5 flex justify-center">
            <button id="addCollection"
                    class="mx-auto bg-gradient-to-r font-sans from-blue-600 to-purple-600 text-white py-2 px-3 rounded">
                Tạo bộ sưu
                tập mới
            </button>
        </div>
    </div>
    <!-- Danh sách bài viết -->
    <div class="lg:w-3/4 w-full lg:ml-6 lg:pt-0 h-fit p-4">
        <div class="border-b pb-3 flex items-center">
            <h1 class="text-2xl font-bold text-blue-600">Tên bộ sưu tập</h1>
            <div class="ml-auto text-blue-600">
                <button id="editNameBtn"><i class="fa fa-edit"></i></button>
                <button onclick="deleteList()" class="text-red-500 ml-5">
                    <i class="fa fa-trash-alt text-red-500"></i>
                </button>
            </div>
            <script>
                function deleteList() {
                    if (confirm("Bạn có chắc chắn xóa danh sách?")) {
                    }
                }
            </script>
        </div>
        <div class="mt-4">

            <div class="flex items-center mb-2 p-2">
                <input type="checkbox" class="" name="" id="">
                <p class="ml-2 font-sans">Tất cả</p>
                <button class="ml-auto"><i class="fa fa-trash-alt text-red-500"></i></button>
            </div>
            <div id="postList" class="w-full block"></div>
<!--
            <div class="flex rounded-lg relative cursor-pointer items-start shadow-lg p-3 mb-6 border pb-4" id="postList">

                <input type="checkbox" class="mt-1" name="" id="">
                <div class="flex-1 ml-5 lg:w-4/5 w-2/3">
                    <h2 class="text-xl overflow-ellipsis overflow-hidden whitespace-nowrap font-bold hover:underline text-blue-600">
                      Description
                    </h2>
                    <p class="text-gray-500 text-sm overflow-ellipsis overflow-hidden whitespace-nowrap">
                        <b>
                           RecipeName
                        </b>
                    </p>
                    <p class="text-gray-600 text-sm mt-2"><b>Thời gian thực hiện:</b> PrepTime phút</p>
                    <div class="flex overflow-ellipsis overflow-hidden whitespace-nowrap items-center mt-2">
                        <div class="text-blue-500">★★★★★</div>
                        <span class="text-blue-500 ml-2 ">(1281)</span>
                    </div>
                </div>
                <div class="lg:w-1/5 w-1/3 ml-3 h-24 relative md:flex hidden">
                    <img src="~/Themes/images/recipe/RecipeImage" alt="Chicken Marsala"
                         class="w-full h-full object-cover rounded">
                </div>

            </div>
                   -->
            </div>
    </div>
</div>
<!-- Modal thêm bộ sưu tập -->
<div id="modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
    <div class="bg-white p-6 rounded-lg shadow-lg w-96">
        <div class="flex justify-between items-center mb-4">
            <div class="text-xl border-b w-full pb-3 font-bold">Tạo bộ sưu tập</div>
            <button id="closeModal" class="pb-3 text-gray-500">&times;</button>
        </div>
        <input id="collectionName" type="text" placeholder="Đặt tên cho bộ sưu tập của bạn..."
               class="w-full font-sans p-2 border rounded-lg mb-4">
        <div class="flex justify-end space-x-5">
            <button id="cancel" class="text-blue-500 font-sans">Hủy</button>
            <button id="createCollection" class="font-sans bg-gray-300 text-gray-500 px-4 py-2 rounded-lg"
                    disabled>
                Tạo
            </button>
        </div>
    </div>
    <script>
        const addCollectionBtn = document.getElementById('addCollection');
        const modal = document.getElementById('modal');
        const closeModalBtn = document.getElementById('closeModal');
        const cancelBtn = document.getElementById('cancel');
        const createCollectionBtn = document.getElementById('createCollection');
        const collectionNameInput = document.getElementById('collectionName');
        const collectionList = document.getElementById('collectionList');

        addCollectionBtn.addEventListener('click', () => {
            modal.classList.remove('hidden');
            setTimeout(() => {
                document.getElementById("collectionName").focus();
            }, 0);
        });

        closeModalBtn.addEventListener('click', () => {
            modal.classList.add('hidden');
        });

        cancelBtn.addEventListener('click', () => {
            modal.classList.add('hidden');
        });

        collectionNameInput.addEventListener('input', () => {
            createCollectionBtn.disabled = collectionNameInput.value.trim() === '';
            createCollectionBtn.classList.toggle('bg-blue-600', collectionNameInput.value.trim() !== '');
            createCollectionBtn.classList.toggle('text-white', collectionNameInput.value.trim() !== '');
            createCollectionBtn.classList.toggle('bg-gray-300', collectionNameInput.value.trim() === '');
            createCollectionBtn.classList.toggle('text-gray-500', collectionNameInput.value.trim() === '');
        });

        createCollectionBtn.addEventListener('click', () => {
            const collectionName = collectionNameInput.value.trim();
            if (collectionName) {
                const newCollection = document.createElement('div');
                newCollection.classList.add('flex', 'items-center', 'space-x-3', 'p-2', 'hover:bg-gray-100', 'cursor-pointer');
                newCollection.innerHTML = `
                                <img src="/Themes/assets/images/vLOGO.png" class="w-12 h-12 object-cover" alt="${collectionName}">
                                <div>
                                    <p class="font-semibold">${collectionName}</p>
                                    <p class="text-sm font-sans text-gray-500">0 công thức</p>
                                </div>
                            `;
                collectionList.appendChild(newCollection);
                modal.classList.add('hidden');
                collectionNameInput.value = '';
                createCollectionBtn.disabled = true;
            }
        });
    </script>
</div>
<script>
    let currentListId = null;
    function loadListPosts(listId) {
            currentListId = listId;
        const clickedElement = event.currentTarget || event.target.closest('[onclick^="loadListPosts"]');
        const listName = clickedElement.getAttribute('data-name');
        const heading = document.querySelector('h1.text-2xl.font-bold.text-blue-600');
        if (heading && listName) {
            heading.textContent = listName;
        }

    fetch('/List/GetPostsInList?listId=' + listId)
        .then(response => response.json())
        .then(data => {
            const postList = document.getElementById('postList');
            postList.innerHTML = '';

            if (data.length === 0) {
                postList.innerHTML = '<p class="text-gray-500">Danh sách này chưa có bài viết nào.</p>';
                return;
            }

            data.forEach(post => {
                const html = `
                    <div class="w-full flex flex-wrap rounded-lg items-start shadow p-3 mb-4 border pb-4">
                        <input type="checkbox" class="mt-1" data-id="${post.recipeID}">
                        <div class="flex-1 ml-5 lg:w-4/5 w-2/3">
                                <div class="mb-1 font-medium text-xl overflow-ellipsis overflow-hidden whitespace-nowrap cursor-pointer"
                             id="01">
                                  <a href="/Recipe/Detail/${post.recipeID}">${post.recipeName}</a>
                                </div>
                            <p class="text-gray-500 text-base font-sans overflow-ellipsis overflow-hidden whitespace-nowrap">
                                <b>${post.description || '(Không có mô tả)'}</b>
                            </p>
                            <p class="text-gray-600 font-sans text-sm mt-1">${post.prepTime} phút</p>
                        </div>
                        <div class="lg:w-1/5 w-1/3 mt-3 h-24 mx-auto relative md:flex hidden">
                            <img src="/Themes/images/recipe/${post.recipeImage}" alt="${post.recipeName}" class="w-full h-full object-cover rounded">
                        </div>
                    </div>
                `;
                postList.insertAdjacentHTML('beforeend', html);
            });
        })
        .catch(error => {
            console.error('Lỗi khi load bài viết:', error);
        });
}

        // Đảm bảo khi vào trang sẽ chọn danh sách đầu tiên
        window.onload = function() {
            const firstListItem = document.querySelector('#collectionList .flex');
            if (firstListItem) {
                // Gọi sự kiện click vào item đầu tiên
                firstListItem.click();
            }
        };
        document.querySelector('.fa-trash-alt.text-red-500').addEventListener('click', function () {
            const checkedBoxes = document.querySelectorAll('#postList input[type="checkbox"]:checked');
            if (checkedBoxes.length === 0) {
                alert("Vui lòng chọn ít nhất một bài viết để xoá.");
                return;
            }

            if (!confirm("Bạn có chắc chắn muốn xoá các bài viết đã chọn khỏi bộ sưu tập?")) return;

            const recipeIds = Array.from(checkedBoxes).map(cb => cb.getAttribute('data-id'));

            // Gửi yêu cầu xoá
            fetch('/List/DeleteRecipesFromList', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
            body: JSON.stringify({ recipeIds: recipeIds, listId: currentListId })
            })
                .then(response => {
                    if (!response.ok) throw new Error("Lỗi khi xoá");
                    return response.json();
                })
                .then(result => {
                    // Xoá khỏi DOM
                    recipeIds.forEach(id => {
                        const box = document.querySelector(`#postList input[data-id="${id}"]`);
                        if (box) {
                            box.closest('.w-full.flex').remove(); // Xoá div cha chứa recipe
                        }
                    });

                    // Nếu không còn bài nào
                    if (document.querySelectorAll('#postList .w-full.flex').length === 0) {
                        document.getElementById('postList').innerHTML = '<p class="text-gray-500">Danh sách này chưa có bài viết nào.</p>';
                    }
                })
                .catch(error => {
                    console.error('Xoá lỗi:', error);
                    alert("Đã xảy ra lỗi khi xoá.");
                });
        });
</script>






<!-- Modal đổi tên bộ sưu tập -->
<div id="modalEditName" class="hidden fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
    <div class="bg-white p-6 rounded-lg shadow-lg w-96">
        <div class="flex justify-between items-center mb-4">
            <div class="text-xl border-b pb-3 w-full font-bold">Đổi tên bộ sưu tập</div>
            <button id="closeModalEdit" class="text-gray-500 pb-3">&times;</button>
        </div>
        <input id="changeNameInput" type="text" placeholder="Nhập tên mới..."
               class="w-full p-2 border rounded-lg mb-4">
        <div class="flex justify-end space-x-5">
            <button id="cancelEdit" class="text-blue-500">Hủy</button>
            <button id="editName" class="bg-gray-300 text-gray-500 px-4 py-2 rounded-lg" disabled>Đổi tên</button>
        </div>
    </div>
</div>
<script>
    const editNameBtn = document.getElementById('editNameBtn');
    const modalEdit = document.getElementById('modalEditName');
    const closeModalEdit = document.getElementById('closeModalEdit');
    const cancelBtnEdit = document.getElementById('cancelEdit');
    const editName = document.getElementById('editName');
    const changeNameInput = document.getElementById('changeNameInput');

    editNameBtn.addEventListener('click', () => {
        modalEdit.classList.remove('hidden');
        setTimeout(() => {
            document.getElementById("changeNameInput").focus();
        }, 0);
    });

    closeModalEdit.addEventListener('click', () => {
        modalEdit.classList.add('hidden');
    });

    cancelBtnEdit.addEventListener('click', () => {
        modalEdit.classList.add('hidden');
    });

    changeNameInput.addEventListener('input', () => {
        editName.disabled = changeNameInput.value.trim() === '';
        editName.classList.toggle('bg-gradient-to-r', changeNameInput.value.trim() !== '');
        editName.classList.toggle('from-blue-600', changeNameInput.value.trim() !== '');
        editName.classList.toggle('to-purple-600', changeNameInput.value.trim() !== '');
        editName.classList.toggle('text-white', changeNameInput.value.trim() !== '');
        editName.classList.toggle('bg-gray-300', changeNameInput.value.trim() === '');
        editName.classList.toggle('text-gray-500', changeNameInput.value.trim() === '');
    });

    editName.addEventListener('click', () => {
        const newName = changeNameInput.value.trim();
        if (newName) {
            modalEdit.classList.add('hidden');
            changeNameInput.value = '';
            editName.disabled = true;
        }
    });

</script>